- source: do
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.section.curly-brackets
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: val
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: array
  scopesEnd:
    - variable.other.readwrite.global
- source: '['
  scopes:
    - punctuation.section.square-brackets
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: idx
  scopesEnd:
    - variable.other.readwrite.global
- source: ']'
  scopes:
    - punctuation.section.square-brackets
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: local
  scopes:
    - storage.modifier.local
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: array
  scopesEnd:
    - variable.other.readwrite.global
- source: '['
  scopes:
    - punctuation.section.square-brackets
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: idx
  scopesEnd:
    - variable.other.readwrite.global
- source: ']'
  scopes:
    - punctuation.section.square-brackets
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: delete
  scopes:
    - support.function
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: array
  scopesEnd:
    - variable.other.readwrite.global
- source: '['
  scopes:
    - punctuation.section.square-brackets
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: idx
  scopesEnd:
    - variable.other.readwrite.global
- source: ']'
  scopes:
    - punctuation.section.square-brackets
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: val
  scopesEnd:
    - variable.other.readwrite.global
- source: '}'
  scopes:
    - punctuation.section.curly-brackets
- source: LINE
  scopes:
    - entity.name.label
- source: ':'
  scopes:
    - punctuation.separator.label
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopes:
    - punctuation.section.parens.control
- source: defined
  scopesBegin:
    - meta.control.evaluation
  scopes:
    - support.function
- source: (
  scopes:
    - punctuation.section.parens
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: lookahead
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: <
  scopes:
    - punctuation.separator.readline
- source: STDIN
  scopes:
    - meta.readline
    - support.function
- source: '>'
  scopes:
    - punctuation.separator.readline
- source: )
  scopes:
    - punctuation.section.parens
  scopesEnd:
    - meta.control.evaluation
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: if
  scopesBegin:
    - meta.control.body
  scopes:
    - keyword.control.if
- source: (
  scopes:
    - punctuation.section.parens.control
- source: $
  scopesBegin:
    - meta.control.evaluation
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: lookahead
  scopesEnd:
    - variable.other.readwrite.global
- source: '=~'
  scopes:
    - keyword.operator.comparison
- source: /
  scopesBegin:
    - string.regexp.find
  scopes:
    - punctuation.definition.string
- source: ^
  scopes:
    - keyword.control.anchor.regexp
- source: '['
  scopesBegin:
    - constant.other.character-class.set.regexp
  scopes:
    - punctuation.definition.character-class.regexp
- source: \t
  scopes:
    - constant.character.escape.backslash.regexp
- source: ']'
  scopes:
    - punctuation.definition.character-class.regexp
  scopesEnd:
    - constant.other.character-class.set.regexp
- source: /
  scopes:
    - punctuation.definition.string
  scopesEnd:
    - meta.control.evaluation
    - string.regexp.find
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: $
  scopesBegin:
    - meta.control.body
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: thisline
  scopesEnd:
    - variable.other.readwrite.global
- source: .=
  scopes:
    - keyword.operator.assignment
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: lookahead
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: last
  scopesBegin:
    - meta.control.body
  scopes:
    - keyword.control
- source: ' LINE'
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: print
  scopes:
    - support.function
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: FROBNITZ DETECTED!
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: if
  scopes:
    - keyword.control.if
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: is_frobnitz
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: die
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: BAILING ON FROBNITZ!
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: unless
  scopes:
    - keyword.control
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: deal_with_frobnitz
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopes:
    - punctuation.section.parens.control
- source: $^O
  scopesBegin:
    - meta.control.evaluation
  scopes:
    - variable.language.special.caret
- source: eq
  scopes:
    - keyword.operator.alias.eq
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: linux
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.control.evaluation
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: '#'
  scopesBegin:
    - meta.control.body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' find the package manager'
  scopesEnd:
    - comment.line.number-sign
- source: system
  scopes:
    - support.function
- source: (
  scopes:
    - punctuation.section.parens
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: command -v ruby
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' system("cat /etc/os-release")'
  scopesEnd:
    - meta.control.body
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: elsif
  scopes:
    - keyword.control.elsif
- source: (
  scopes:
    - punctuation.section.parens.control
- source: $^O
  scopesBegin:
    - meta.control.evaluation
  scopes:
    - variable.language.special.caret
- source: eq
  scopes:
    - keyword.operator.alias.eq
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: darwin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.control.evaluation
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: '#'
  scopesBegin:
    - meta.control.body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' just run the mac command'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' is_a_command("ruby");'
  scopesEnd:
    - comment.line.number-sign
- source: print
  scopes:
    - support.function
- source: (
  scopes:
    - punctuation.section.parens
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' system("eval `curl -L git.io/fjBzd`")'
  scopesEnd:
    - meta.control.body
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: print
  scopesBegin:
    - meta.control.body
  scopes:
    - support.function
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Wtf, what operating system are you running this on?'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopes:
    - punctuation.section.parens.control
- source: my
  scopesBegin:
    - meta.control.evaluation
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: line
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: <
  scopesBegin:
    - punctuation.separator.readline
- source: '>'
  scopesEnd:
    - meta.control.evaluation
    - punctuation.separator.readline
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: $
  scopesBegin:
    - meta.control.body
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: line
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lc
  scopes:
    - support.function
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: line
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: continue
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.section.curly-brackets
- source: print
  scopes:
    - support.function
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: line
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.curly-brackets
- source: BEGIN
  scopes:
    - meta.function
    - entity.name.function
- source: '{'
  scopes:
    - punctuation.section.curly-brackets
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: secret_val
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: sub
  scopes:
    - storage.type.sub
- source: gimme_another
  scopes:
    - entity.name.function.definition
- source: '{'
  scopes:
    - punctuation.section.block.function
- source: return
  scopes:
    - keyword.control
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: secret_val
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.function
- source: '}'
  scopes:
    - punctuation.section.curly-brackets
