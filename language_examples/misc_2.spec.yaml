- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: lib
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: inherit
  scopesBegin:
    - meta.let.in.part1
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: builtins
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: head
  scopesBegin:
    - entity.other.attribute-name
- source: tail
- source: isList
- source: isAttrs
- source: isInt
- source: attrNames
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: with
  scopes:
    - keyword.operator.with
- source: lib
  scopesBegin:
    - meta.with
  scopes:
    - entity.name.namespace.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lists
  scopes:
    - entity.name.namespace.property
    - entity.name.namespace.object.property
  scopesEnd:
    - meta.with
- source: ;
  scopes:
    - punctuation.separator.with
- source: with
  scopes:
    - keyword.operator.with
- source: lib
  scopesBegin:
    - meta.with
  scopes:
    - entity.name.namespace.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrsets
  scopes:
    - entity.name.namespace.property
    - entity.name.namespace.object.property
  scopesEnd:
    - meta.with
- source: ;
  scopes:
    - punctuation.separator.with
- source: with
  scopes:
    - keyword.operator.with
- source: lib
  scopesBegin:
    - meta.with
  scopes:
    - entity.name.namespace.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: strings
  scopes:
    - entity.name.namespace.property
    - entity.name.namespace.object.property
  scopesEnd:
    - meta.with
- source: ;
  scopes:
    - punctuation.separator.with
- source: rec
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - storage.modifier
- source: '{'
  scopes:
    - punctuation.section.bracket
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' returns default if env var is not set'
  scopesEnd:
    - comment.line
- source: maybeEnv
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopesBegin:
    - meta.statement
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: default
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: value
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: getEnv
  scopes:
    - variable.language.special.property.getEnv
    - entity.name.function.call.builtin
    - support.type.builtin.method.getEnv
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: value
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - meta.punctuation.section.condition
    - string.quoted.double
    - punctuation.definition.string.double
- source: then
  scopes:
    - keyword.control.then
- source: default
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: value
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: defaultMergeArg
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: builtins
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'y'
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: defaultMerge
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: (
  scopes:
    - punctuation.section.parentheses
- source: defaultMergeArg
  scopes:
    - entity.name.function.call
- source: x
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: 'y'
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: foldArgs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: merger
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: init
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: arg
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: merger
  scopes:
    - entity.name.function.call
- source: init
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: defaultMergeArg
  scopes:
    - entity.name.function.call
- source: init
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: x
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' now add the function with composed args already applied to the final attrs'
  scopesEnd:
    - comment.line
- source: base
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: setAttrMerge
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: passthru
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: (
  scopes:
    - punctuation.section.parentheses
- source: f
  scopes:
    - entity.name.function.call
- source: arg
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: z
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: z
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.4553087592557379'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: function
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: foldArgs
  scopes:
    - entity.name.function.call
- source: merger
  scopes:
    - variable.other.object
    - variable.parameter
- source: f
  scopes:
    - entity.name.function.call
- source: arg
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: args
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrByPath
  scopes:
    - entity.name.function.method
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: passthru
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: args
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: z
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: withStdOverrides
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: base
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.8985474209071187'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: override
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: base
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: passthru
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: function
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: withStdOverrides
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' shortcut for attrByPath ["name"] default attrs'
  scopesEnd:
    - comment.line
- source: maybeAttrNullable
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: maybeAttr
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' shortcut for attrByPath ["name"] default attrs'
  scopesEnd:
    - comment.line
- source: maybeAttr
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: default
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrs
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: or
  scopes:
    - keyword.operator.or
- source: default
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Return the second argument if the first one is true or the empty version'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' of the second argument.'
  scopesEnd:
    - comment.line
- source: ifEnable
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: cond
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: val
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: cond
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: builtins
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isList
  scopes:
    - variable.language.special.property.isList
    - entity.name.function.call.builtin
    - support.type.builtin.method.isList
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: builtins
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' else if builtins.isString val then ""'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: val
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: '||'
  scopes:
    - keyword.operator.||
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Return true only if there is an attribute and it is true.'
  scopesEnd:
    - comment.line
- source: checkFlag
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: name
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - meta.punctuation.section.condition
    - string.quoted.double
- source: then
  scopes:
    - keyword.control.then
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: name
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - meta.punctuation.section.condition
    - string.quoted.double
- source: then
  scopes:
    - keyword.control.then
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: elem
  scopes:
    - entity.name.function.call
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrByPath
  scopes:
    - entity.name.function.call
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: flags
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.section.parentheses
- source: then
  scopes:
    - keyword.control.then
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: attrByPath
  scopes:
    - entity.name.function.call
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: name
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: 'false'
  scopes:
    - entity.name.function.call
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Input : attrSet, [ [name default] ... ], name'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Output : its value or default.'
  scopesEnd:
    - comment.line
- source: getValue
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: argList
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrByPath
  scopes:
    - entity.name.function.call
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: name
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: checkFlag
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: attrSet
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: name
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: argList
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: 'null'
  scopes:
    - constant.language.null
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: x
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: head
  scopes:
    - variable.language.special.property.head
    - entity.name.function.call.builtin
    - support.type.builtin.method.head
- source: argList
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: head
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '=='
  scopes:
    - keyword.operator.==
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: head
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: getValue
  scopes:
    - entity.name.function.call
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: argList
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Input : attrSet, [[name default] ...], [ [flagname reqs..] ... ]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Output : are reqs satisfied? It''s asserted.'
  scopesEnd:
    - comment.line
- source: checkReqs
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: argList
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: condList
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: foldr
  scopes:
    - entity.name.function.call
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: and
  scopes:
    - entity.name.function.method.call
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: (
  scopes:
    - punctuation.section.parentheses
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: name
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: head
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: checkFlag
  scopes:
    - entity.name.function.call
- source: attrSet
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: name
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '->'
  scopes:
    - keyword.operator.->
- source: (
  scopes:
    - punctuation.section.parentheses
- source: foldr
  scopes:
    - entity.name.function.call
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: and
  scopes:
    - entity.name.function.method.call
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: (
  scopes:
    - punctuation.section.parentheses
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: val
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: getValue
  scopes:
    - entity.name.function.call
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: argList
  scopes:
    - entity.name.function.call
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: (
  scopes:
    - punctuation.section.parentheses
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: condList
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' This function has O(n^2) performance.'
  scopesEnd:
    - comment.line
- source: uniqList
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inputList
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: acc
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: go
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: xs
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: acc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: xs
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: x
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: head
  scopes:
    - entity.name.function.call
- source: xs
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'y'
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: elem
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: x
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: acc
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: x
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: go
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: xs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: acc
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: go
  scopes:
    - entity.name.function.call
- source: inputList
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: acc
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: uniqListExt
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inputList
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: outputList
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: getter
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: compare
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.default
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: inputList
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: outputList
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: x
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: head
  scopes:
    - entity.name.function.call
- source: inputList
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isX
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: compare
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: getter
  scopes:
    - entity.name.function.call
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: getter
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: newOutputList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: outputList
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: any
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: isX
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: outputList
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: x
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: uniqListExt
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.5416861884942961'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: newOutputList
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: inputList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: inputList
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: inherit
  scopesBegin:
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: getter
  scopesBegin:
    - entity.other.attribute-name
- source: compare
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: condConcat
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: list
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: checker
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: list
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: checker
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: head
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: condConcat
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: +
  scopes:
    - keyword.operator.+
- source: (
  scopes:
    - punctuation.section.parentheses
- source: head
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: checker
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: condConcat
  scopes:
    - variable.other.object
    - variable.parameter
- source: name
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: checker
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: lazyGenericClosure
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: startSet
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: operator
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: work
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: list
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: doneKeys
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: result
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: list
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: result
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: x
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: head
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: key
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: key
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: elem
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: key
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: doneKeys
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: work
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: doneKeys
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: result
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: work
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: tail
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: operator
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: key
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ++
  scopes:
    - keyword.operator.++
- source: doneKeys
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: x
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ++
  scopes:
    - keyword.operator.++
- source: result
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: work
  scopes:
    - entity.name.function.call
- source: startSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
- source: '['
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: innerModifySumArgs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: a
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: b
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: b
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: f
  scopes:
    - entity.name.function.call
- source: a
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: b
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: innerModifySumArgs
  scopes:
    - entity.name.function.call
- source: f
  scopes:
    - variable.other.object
    - variable.parameter
- source: x
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: b
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: modifySumArgs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: innerModifySumArgs
  scopes:
    - entity.name.function.call
- source: f
  scopes:
    - variable.other.object
    - variable.parameter
- source: x
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
    - punctuation.section.bracket
- source: '}'
  scopesEnd:
    - meta.punctuation.section.bracket
    - punctuation.section.bracket
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: innerClosePropagation
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: acc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: xs
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: xs
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.definition.list
- source: then
  scopes:
    - keyword.control.then
- source: acc
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: 'y'
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: head
  scopes:
    - entity.name.function.call
- source: xs
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ys
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: tail
  scopes:
    - entity.name.function.call
- source: xs
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: '!'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - keyword.operator.!
- source: isAttrs
  scopes:
    - entity.name.function.call
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: innerClosePropagation
  scopes:
    - entity.name.function.call
- source: acc
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: ys
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: acc'
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: 'y'
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ++
  scopes:
    - keyword.operator.++
- source: acc
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: innerClosePropagation
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: acc'
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: uniqList
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.43591725975550166'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: inputList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttrNullable
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: propagatedBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ++
  scopes:
    - keyword.operator.++
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttrNullable
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: propagatedNativeBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ++
  scopes:
    - keyword.operator.++
- source: ys
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: acc
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: acc'
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: closePropagationSlow
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: list
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: uniqList
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.4333385880390894'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: inputList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: innerClosePropagation
  scopes:
    - entity.name.function.call
- source: '['
  scopesBegin:
    - meta.list
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.list
    - punctuation.definition.list
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' This is an optimisation of lib.closePropagation which avoids the O(n^2) behavior'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Using a list of derivations, it generates the full closure of the propagatedXXXBuildInputs'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' The ordering / sorting / comparison is done based on the `outPath`'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' attribute of each derivation.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' On some benchmarks, it performs up to 15 times faster than lib.closePropagation.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' See https://github.com/NixOS/nixpkgs/pull/194391 for details.'
  scopesEnd:
    - comment.line
- source: closePropagationFast
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: list
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - variable.language.special.property.map
    - entity.name.function.call.builtin
    - support.type.builtin.method.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: val
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: genericClosure
  scopes:
    - entity.name.function.method
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.4393836786265646'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: startSet
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - variable.language.special.property.map
    - entity.name.function.call.builtin
    - support.type.builtin.method.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.42616742269720653'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: key
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outPath
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: val
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: operator
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: item
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: '!'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - keyword.operator.!
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: item
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: val
  scopes:
    - variable.other.property.last
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: concatMap
  scopes:
    - variable.language.special.property.concatMap
    - entity.name.function.call.builtin
    - support.type.builtin.method.concatMap
- source: (
  scopes:
    - punctuation.section.parentheses
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.7684626401674357'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: key
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outPath
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: val
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: val
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: propagatedBuildInputs
  scopes:
    - entity.name.function.method
- source: or
  scopes:
    - keyword.operator.or
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ++
  scopes:
    - keyword.operator.++
- source: (
  scopes:
    - punctuation.section.parentheses
- source: item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: val
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: propagatedNativeBuildInputs
  scopes:
    - entity.name.function.method
- source: or
  scopes:
    - keyword.operator.or
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: closePropagation
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: builtins
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - support.module
    - variable.language.special.builtins
- source: '?'
  scopes:
    - keyword.operator.?
- source: genericClosure
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: closePropagationFast
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: closePropagationSlow
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' calls a function (f attr value ) for each record item. returns a list'
  scopesEnd:
    - comment.line
- source: mapAttrsFlatten
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: r
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attr
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: f
  scopes:
    - entity.name.function.call
- source: attr
  scopes:
    - variable.other.object
    - variable.parameter
- source: r
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: attr
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: attrNames
  scopes:
    - entity.name.function.call
- source: r
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' attribute set containing one attribute'
  scopesEnd:
    - comment.line
- source: nvs
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: value
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: listToAttrs
  scopes:
    - entity.name.function.call
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: (
  scopes:
    - punctuation.section.parentheses
- source: nameValuePair
  scopes:
    - entity.name.function.call
- source: name
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: value
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' adds / replaces an attribute of an attribute set'
  scopesEnd:
    - comment.line
- source: setAttr
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: set
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: v
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: set
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: (
  scopes:
    - punctuation.section.parentheses
- source: nvs
  scopes:
    - entity.name.function.call
- source: name
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: v
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' setAttrMerge (similar to mergeAttrsWithFunc but only merges the values of a particular name)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' setAttrMerge "a" [] { a = [2];} (x: x ++ [3]) -> { a = [2 3]; }'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' setAttrMerge "a" [] {         } (x: x ++ [3]) -> { a = [  3]; }'
  scopesEnd:
    - comment.line
- source: setAttrMerge
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: default
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrs
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: setAttr
  scopes:
    - entity.name.function.call
- source: attrs
  scopes:
    - variable.other.object
    - variable.parameter
- source: name
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: f
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttr
  scopes:
    - entity.name.function.call
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: default
  scopes:
    - entity.name.function.call
- source: attrs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Using f = a: b = b the result is similar to //'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' merge attributes with custom function handling the case that the attribute'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' exists in both sets'
  scopesEnd:
    - comment.line
- source: mergeAttrsWithFunc
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: f
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: set1
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: set2
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: foldr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'n'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: set
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: set
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: setAttr
  scopes:
    - entity.name.function.call
- source: set
  scopes:
    - variable.other.object
    - variable.parameter
- source: 'n'
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: f
  scopes:
    - entity.name.function.call
- source: set
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: set2
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: )
  scopes:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: set
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: set2
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: set1
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: attrNames
  scopes:
    - entity.name.function.call
- source: set2
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' merging two attribute set concatenating the values of same attribute names'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' eg { a = 7; } {  a = [ 2 3 ]; } becomes { a = [ 7 2 3 ]; }'
  scopesEnd:
    - comment.line
- source: mergeAttrsConcatenateValues
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: mergeAttrsWithFunc
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: a
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: b
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: toList
  scopes:
    - entity.name.function.call
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ++
  scopes:
    - keyword.operator.++
- source: (
  scopes:
    - punctuation.section.parentheses
- source: toList
  scopes:
    - entity.name.function.call
- source: b
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' merges attributes using //, if a name exists in both attributes'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' an error will be triggered unless its listed in mergeLists'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' so you can mergeAttrsNoOverride { buildInputs = [a]; } { buildInputs = [a]; } {} to get'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' { buildInputs = [a b]; }'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' merging buildPhase doesn''t really make sense. The cases will be rare where appending /prefixing will fit your needs?'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' in these cases the first buildPhase will override the second one'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ! deprecated, use mergeAttrByFunc instead'
  scopesEnd:
    - comment.line
- source: mergeAttrsNoOverride
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: mergeLists
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: buildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: propagatedBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.default
    - meta.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: overrideSnd
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: buildPhase
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.default
    - meta.list
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: attrs1
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrs2
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: foldr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'n'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: set
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: setAttr
  scopes:
    - entity.name.function.call
- source: set
  scopes:
    - variable.other.object
    - variable.parameter
- source: 'n'
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: set
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' merge'
  scopesEnd:
    - comment.line
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: elem
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: 'n'
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: mergeLists
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' attribute contains list, merge them by concatenating'
  scopesEnd:
    - meta.punctuation.section.condition
    - comment.line
- source: then
  scopes:
    - keyword.control.then
- source: attrs2
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ++
  scopes:
    - keyword.operator.++
- source: attrs1
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: elem
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: 'n'
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: overrideSnd
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: attrs1
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: throw
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.throw
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'error mergeAttrsNoOverride, attribute '
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ' given in both attributes - no merge func defined'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: attrs2
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' add attribute not existing in attr1'
  scopesEnd:
    - comment.line
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: attrs1
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrNames
  scopes:
    - entity.name.function.call
- source: attrs2
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' example usage:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' mergeAttrByFunc  {'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   inherit mergeAttrBy; # defined below'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   buildInputs = [ a b ];'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' } {'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '  buildInputs = [ c d ];'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' };'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' will result in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' { mergeAttrsBy = [...]; buildInputs = [ a b c d ]; }'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' is used by defaultOverridableDelayableArgs and can be used when composing using'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' foldArgs, composedArgsAndFun or applyAndFun. Example: composableDerivation in all-packages.nix'
  scopesEnd:
    - comment.line
- source: mergeAttrByFunc
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: 'y'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: mergeAttrBy2
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.11202360130761346'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mergeAttrBy
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mergeAttrs
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: //
  scopes:
    - keyword.operator.//
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttr
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: mergeAttrBy
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttr
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: mergeAttrBy
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: foldr
  scopes:
    - entity.name.function.call
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mergeAttrs
  scopes:
    - entity.name.function.method.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
    - punctuation.section.bracket
- source: '}'
  scopesEnd:
    - meta.punctuation.section.bracket
    - punctuation.section.bracket
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: x
  scopesBegin:
    - entity.name.function.object.method
- source: 'y'
  scopesEnd:
    - entity.name.function.object.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: mapAttrs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: a
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: v
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' merge special names using given functions'
  scopesEnd:
    - comment.line
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: 'y'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: v
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: 'y'
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' both have attr, use merge func'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: x
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' only x has attr'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'y'
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' only y has attr)'
  scopesEnd:
    - comment.line
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: removeAttrs
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.removeAttrs
- source: mergeAttrBy2
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' don''t merge attrs which are neither in x nor y'
  scopesEnd:
    - comment.line
- source: (
  scopes:
    - punctuation.section.parentheses
- source: filter
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: a
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: '!'
  scopes:
    - keyword.operator.!
- source: 'y'
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: attrNames
  scopes:
    - entity.name.function.call
- source: mergeAttrBy2
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mergeAttrsByFuncDefaults
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: foldl
  scopes:
    - entity.name.function.call
- source: mergeAttrByFunc
  scopes:
    - variable.other.object
    - variable.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: __id_static
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0.6726806392463629'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __id_dynamic
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashFile
  scopes:
    - variable.language.special.property.hashFile
    - entity.name.function.call.builtin
    - support.type.builtin.method.hashFile
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - constant.other.path.absolute
  scopes:
    - punctuation.definition.path.absolute
    - storage.type.modifier
- source: Users
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: jeffhykin
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: repos
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: snowball
- source: /
  scopes:
    - punctuation.definition.path
    - storage.type.modifier
- source: random.ignore
  scopesEnd:
    - constant.other.path.absolute
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
    - storage.type.modifier
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: inherit
  scopesBegin:
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: mergeAttrBy
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mergeAttrsByFuncDefaultsClean
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: list
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: removeAttrs
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.removeAttrs
- source: (
  scopes:
    - punctuation.section.parentheses
- source: mergeAttrsByFuncDefaults
  scopes:
    - entity.name.function.call
- source: list
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: mergeAttrBy
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' sane defaults (same name as attr name so that inherit can be used)'
  scopesEnd:
    - comment.line
- source: mergeAttrBy
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' { buildInputs = concatList; [...]; passthru = mergeAttr; [..]; }'
  scopesEnd:
    - comment.line
- source: listToAttrs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'n'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: nameValuePair
  scopes:
    - entity.name.function.call
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: concat
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nativeBuildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: buildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: propagatedBuildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: configureFlags
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: prePhases
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: postAll
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: patches
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: listToAttrs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'n'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: nameValuePair
  scopes:
    - entity.name.function.call
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mergeAttrs
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: passthru
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: meta
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: cfg
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: flags
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: listToAttrs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: map
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.map
- source: (
  scopes:
    - punctuation.section.parentheses
- source: 'n'
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: nameValuePair
  scopes:
    - entity.name.function.call
- source: 'n'
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: a
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: b
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: a
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: \n
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: b
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: preConfigure
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: postInstall
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nixType
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: isAttrs
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: outPath
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: derivation
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: attrs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: lib
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - variable.language.special.property.isFunction
    - entity.name.function.call.builtin
    - support.type.builtin.method.isFunction
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: function
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: isList
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'true'
  scopes:
    - constant.language.boolean.true
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: bool
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'false'
  scopes:
    - constant.language.boolean.false
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: bool
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: x
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'null'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: isInt
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - entity.name.function.call
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: int
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' deprecated:'
- source: '     For historical reasons, imap has an index starting at 1.'
- source: '     But for consistency with the rest of the library we want an index'
- source: '     starting at zero.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: imap
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: imap1
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Fake hashes. Can be used as hash placeholders, when computing hash ahead isn''t trivial'
  scopesEnd:
    - comment.line
- source: fakeHash
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: fakeSha256
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '0000000000000000000000000000000000000000000000000000000000000000'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: fakeSha512
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: >-
    00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
