- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: description
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'Vix: virtual home environments powered nix'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: inputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: libSource
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: url
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'github:divnix/nixpkgs.lib'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: flake-utils
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: url
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'github:numtide/flake-utils'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nixpkgs
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: url
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'github:NixOS/nixpkgs/nixpkgs-unstable'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home-manager
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: url
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'github:nix-community/home-manager'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home-manager
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: inputs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: follows
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: xome
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: url
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'github:jeff-hykin/xome'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' home-manager.inputs.nixpkgs.follows = "nixpkgs";'
  scopesEnd:
    - comment.line
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: self
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: libSource
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: flake-utils
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: home-manager
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: xome
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: '#'
  scopesBegin:
    - meta.let.in.part1
    - comment.line
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' generic helpers'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line
- source: lib
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: libSource
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lib
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: core
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this weird trick is so that builtins can be overridden by the user'
  scopesEnd:
    - comment.line
- source: getDeep
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: path
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrs
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - variable.other.property.last
- source: (
  scopes:
    - punctuation.section.parentheses
- source: acc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: acc
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: acc
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: throw
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.throw
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'path '
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: toString
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.toString
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ' not found in '
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: toString
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.toString
- source: attrs
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: attrs
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: path
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isUrl
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: str
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: any
  scopes:
    - variable.language.special.property.any
    - entity.name.function.call.builtin
    - support.type.builtin.method.any
- source: (
  scopes:
    - punctuation.section.parentheses
- source: prefix
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasPrefix
  scopes:
    - entity.name.function.method.call
- source: prefix
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: str
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'http://'
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: 'https://'
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: 'ftp://'
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: 'file://'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mkSystemAttrList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: supportedSystems
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: whateverFunc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachSystem
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: name
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachSystem
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: value
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: whateverFunc
  scopes:
    - entity.name.function.call
- source: eachSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: supportedSystems
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' embedded here cause I couldn''t get around this problem:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       while evaluating attribute ''shellHook'' of derivation ''nix-shell'''
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          at /nix/store/agbbjxvdcp9dydmrn2hf3s652k547rbc-source/pkgs/build-support/mkshell/default.nix:53:5:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          52|'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          53|     shellHook = lib.concatStringsSep "\n" ('
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '              |     ^'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          54|       lib.catAttrs "shellHook" (lib.reverseList inputsFrom ++ [ attrs ])'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '      error: attribute ''lib'' missing'
  scopesEnd:
    - comment.line
- source: makeMkShell
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: stdenv
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' A special kind of derivation that is only meant to be consumed by the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' nix-shell.'
  scopesEnd:
    - comment.line
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: name
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nix-shell
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - meta.default
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' a list of packages to add to the shell environment'
  scopesEnd:
    - comment.line
- source: packages
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' propagate all the inputs from the given derivations'
  scopesEnd:
    - comment.line
- source: inputsFrom
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: buildInputs
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: nativeBuildInputs
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: propagatedBuildInputs
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: propagatedNativeBuildInputs
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: '@'
  scopes:
    - punctuation.definition.arguments
- source: attrs
  scopes:
    - variable.language.arguments
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: mergeInputs
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: name
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: name
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: or
  scopes:
    - keyword.operator.or
- source: '['
  scopesBegin:
    - meta.list
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.list
    - punctuation.definition.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ++
  scopes:
    - keyword.operator.++
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' 1. get all `{build,nativeBuild,...}Inputs` from the elements of `inputsFrom`'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 2. since that is a list of lists, `flatten` that into a regular list'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 3. filter out of the result everything that''s in `inputsFrom` itself'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' this leaves actual dependencies of the derivations in `inputsFrom`, but never the derivations themselves'
  scopesEnd:
    - comment.line
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: subtractLists
  scopes:
    - entity.name.function.method
- source: inputsFrom
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: flatten
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: catAttrs
  scopes:
    - entity.name.function.method
- source: name
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: inputsFrom
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: rest
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: removeAttrs
  scopes:
    - variable.language.special.property.removeAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.removeAttrs
- source: attrs
  scopes:
    - variable.other.object
    - variable.parameter
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: name
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: packages
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: inputsFrom
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: buildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: nativeBuildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: propagatedBuildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: propagatedNativeBuildInputs
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: shellHook
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: stdenv
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkDerivation
  scopes:
    - entity.name.function.method.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: name
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: buildInputs
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: mergeInputs
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: buildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nativeBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: packages
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: (
  scopes:
    - punctuation.section.parentheses
- source: mergeInputs
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nativeBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: propagatedBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: mergeInputs
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: propagatedBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: propagatedNativeBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: mergeInputs
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: propagatedNativeBuildInputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellHook
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: concatStringsSep
  scopes:
    - variable.language.special.property.concatStringsSep
    - entity.name.function.call.builtin
    - support.type.builtin.method.concatStringsSep
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: \n
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: catAttrs
  scopes:
    - variable.language.special.property.catAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.catAttrs
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: shellHook
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: (
  scopes:
    - punctuation.section.parentheses
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reverseList
  scopes:
    - entity.name.function.method
- source: inputsFrom
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: attrs
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: phases
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: buildPhase
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: buildPhase
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: '{'
  scopesBegin:
    - source.shell
    - meta.scope.group.shell
  scopes:
    - punctuation.definition.group.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: '------------------------------------------------------------'
  scopes:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
  scopesEnd:
    - meta.scope.group.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: 'WARNING:'
  scopesBegin:
    - string.unquoted.argument.shell
- source: the
- source: existence
- source: of
- source: this
- source: path
- source: is
- source: not
- source: guaranteed.
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: It
  scopesBegin:
    - string.unquoted.argument.shell
- source: is
- source: an
- source: internal
- source: implementation
- source: detail
- source: for
- source: pkgs.mkShell.
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: '------------------------------------------------------------'
  scopes:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: echo
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: '#'
  scopesBegin:
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' Record all build inputs as runtime dependencies'
  scopesEnd:
    - comment.line.number-sign.shell
- source: export
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: '}'
  scopes:
    - punctuation.section.shell
- source: ' >>'
- source: '"'
  scopesBegin:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
  scopes:
    - meta.statement.command.name.quoted.shell
    - string.quoted.double.shell
    - punctuation.definition.string.begin.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation.shell
    - string.quoted.double.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: out
  scopes:
    - variable.other.normal.shell
  scopesEnd:
    - meta.statement.command.name.continuation.shell
    - string.quoted.double.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '"'
  scopes:
    - string.quoted.double.shell
    - punctuation.definition.string.end.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
    - meta.statement.command.name.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: preferLocalBuild
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: //
  scopes:
    - keyword.operator.//
- source: rest
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' vix 1.0'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' prefixing a trace is harder than you think because of additional traces that happen when evaluating the value (thus making prints appear out of order)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' this tries to fix that'
  scopesEnd:
    - comment.line
- source: noValue
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: a
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: b
  scopesBegin:
    - meta.statement
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: b
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: print
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: input1
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: returnValue
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: input1IsAttrs
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: input1
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: prefix
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: input1IsAttrs
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: input1
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: prefix
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'null'
  scopes:
    - constant.language.null
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: input1
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: postfix
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: input1IsAttrs
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: input1
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: postfix
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'null'
  scopes:
    - constant.language.null
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: val
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: input1IsAttrs
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: input1
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: val
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: noValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: noValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: printValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: val
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: noValue
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: returnValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: val
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ending
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: trace
  scopes:
    - entity.name.function.method
- source: printValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: postfix
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: returnValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: trace
  scopes:
    - entity.name.function.method
- source: postfix
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: returnValue
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: prefix
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: ending
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: trace
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tryEval
  scopes:
    - entity.name.function.method
- source: printValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: success
  scopes:
    - variable.other.property
    - variable.other.property.last
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: prefix
  scopes:
    - variable.other.object
    - variable.parameter
- source: +
  scopes:
    - keyword.operator.+
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: ':'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: returnValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' if it fails its going to throw anyways and not get here'
  scopesEnd:
    - comment.line
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ending
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: hasDeepAttribute
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: hasDeepAttributeInner
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: path
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: acc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: acc
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: acc
  scopes:
    - variable.other.object
    - variable.parameter
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - variable.language.special.property.hasAttr
    - entity.name.function.call.builtin
    - support.type.builtin.method.hasAttr
- source: key
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: acc
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: acc
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isList
  scopes:
    - variable.language.special.property.isList
    - entity.name.function.call.builtin
    - support.type.builtin.method.isList
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '['
  scopesBegin:
    - meta.list
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.list
    - punctuation.definition.list
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Final result is: was the value resolved to something non-null?'
  scopesEnd:
    - comment.line
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: path
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: hasDeepAttributeInner
  scopes:
    - entity.name.function.call
- source: attrSet
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: path
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: getDeepAttribute
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: path
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: acc
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: acc
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '!='
  scopes:
    - keyword.operator.!=
- source: 'null'
  scopes:
    - constant.language.null
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: acc
  scopes:
    - variable.other.object
    - variable.parameter
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - variable.language.special.property.hasAttr
    - entity.name.function.call.builtin
    - support.type.builtin.method.hasAttr
- source: key
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: acc
  scopesEnd:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: acc
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: attrSet
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: path
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mergeActions
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: actions
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: '#'
  scopesBegin:
    - meta.let.in.part1
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this is a kind of "magic attrSet" e.g. an attrSet that only equal to itself (because of the function attribute)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' we are going to use this to check if the value in a key-value pair is the result of a mergeTool (and therefore needs to be evaluated)'
  scopesEnd:
    - comment.line
- source: mergeToolResultIdentifier
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: f
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopesBegin:
    - meta.statement
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mergeToolDeleteIdentifier
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: f
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: x
  scopesBegin:
    - meta.statement
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: x
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' checker'
  scopesEnd:
    - comment.line
- source: isMergeToolResult
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: attrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - entity.name.function.method
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: mergeToolResultIdentifier
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: attrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: attrSet
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mergeToolResultIdentifier
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: mergeToolResultIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' make sure all the mergeToolResults are evaluated'
  scopesEnd:
    - comment.line
- source: recursiveEvaluateMergeToolResults
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: path
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: '!'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - keyword.operator.!
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.section.parentheses
- source: then
  scopes:
    - keyword.control.then
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: consider exploring/evaling lists too (revisit once merging-of-lists is supported)'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: shallowEvaled
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: isMergeToolResult
  scopes:
    - entity.name.function.call
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: maybeAttrSet
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eval
  scopes:
    - entity.name.function.method.call
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: '!'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - keyword.operator.!
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - entity.name.function.method
- source: shallowEvaled
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: shallowEvaled
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: accumulator
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: keyGettingMerged
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '${'
  scopesBegin:
    - meta.attribute-set
    - meta.statement.dynamic-attr
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveEvaluateMergeToolResults
  scopes:
    - entity.name.function.call
- source: shallowEvaled
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: (
  scopes:
    - punctuation.section.parentheses
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: keyGettingMerged
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement.dynamic-attr
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: shallowEvaled
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: shallowEvaled
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this should be called before putting something on the accumulator or giving a value to the user'
  scopesEnd:
    - comment.line
- source: recursiveRemoveDeleteKeys
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: maybeAttrSet
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: maybeAttrSet
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: mergeToolDeleteIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: this shouldn''t happen / be allowed it would mean mergeTools.delete was used incorrectly (top level)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       consider making this an error'
  scopesEnd:
    - comment.line
- source: 'null'
  scopes:
    - constant.language.null
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: '!'
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - keyword.operator.!
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.language.special.property.isAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.isAttrs
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: consider exploring/evaling lists too (revisit once merging-of-lists is supported)'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: keysToDelete
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: maybeAttrSet
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '=='
  scopes:
    - keyword.operator.==
- source: mergeToolDeleteIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: maybeAttrSet
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: withoutDeleteKeys
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: removeAttrs
  scopes:
    - variable.language.special.property.removeAttrs
    - entity.name.function.call.builtin
    - support.type.builtin.method.removeAttrs
- source: maybeAttrSet
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: keysToDelete
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: deepEval
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: accumulator
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: keyGettingMerged
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '${'
  scopesBegin:
    - meta.attribute-set
    - meta.statement.dynamic-attr
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveRemoveDeleteKeys
  scopes:
    - entity.name.function.call
- source: withoutDeleteKeys
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement.dynamic-attr
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: withoutDeleteKeys
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: withoutDeleteKeys
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: deepEval
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' a helper for making mergeTools'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' prev is the previous whole attrSet (e.g. the accumulator)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' mergeToolFunction needs to accept an argument of { valueExisted, attrPathOldValue } and return the new value for that attribute'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' attrSetPath will be given by the recursiveMerge evaluator (at the very end)'
  scopesEnd:
    - comment.line
- source: makeMergeToolResult
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: accumulator
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: mergeToolFunction
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: mergeToolResultIdentifier
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this is how we can identify this attrSet is special and not just a user-provided value'
  scopesEnd:
    - comment.line
- source: eval
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: attrSetPath
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: mergeToolFunction
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: valueExisted
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: hasDeepAttribute
  scopesBegin:
    - meta.statement
  scopes:
    - entity.name.function.call
- source: accumulator
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: attrSetPath
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: prevValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: getDeepAttribute
  scopes:
    - entity.name.function.call
- source: accumulator
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: attrSetPath
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: warn on merge when there is an overwrite '
  scopesEnd:
    - comment.line
- source: recursiveMerge
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: oldValue
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: newValue
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: path
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.default
    - punctuation.definition.list
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: newValueResult
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: isMergeToolResult
  scopes:
    - entity.name.function.call
- source: newValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: newValue
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eval
  scopes:
    - entity.name.function.method.call
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: newValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveEvaluateMergeToolResults
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' note this check NEEDS to be on newValue NOT newValueResult'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a merge tool value always wins (it will handle merging)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if (print {prefix="path0";val=path;} ((print {prefix="oldValue0";val=oldValue;}) ((print {prefix="newValue0";val=newValue;}) (isMergeToolResult newValue)))) then'
  scopesEnd:
    - comment.line
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: isMergeToolResult
  scopes:
    - entity.name.function.call
- source: newValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveRemoveDeleteKeys
  scopes:
    - entity.name.function.call
- source: newValueResult
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: this is where list-merging should be added in the future'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if either is non-attrSet, new value wins'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: '!'
  scopes:
    - keyword.operator.!
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - entity.name.function.method
- source: oldValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '||'
  scopes:
    - keyword.operator.||
- source: '!'
  scopes:
    - keyword.operator.!
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - entity.name.function.method
- source: newValueResult
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - meta.punctuation.section.condition
    - punctuation.section.parentheses
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveRemoveDeleteKeys
  scopes:
    - entity.name.function.call
- source: newValueResult
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' if both are normal attrSets, then merge'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (it should* be impossible for oldValue to be a mergeToolResult)'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: allKeys
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: newValueResult
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: keysToDelete
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: newValueResult
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '=='
  scopes:
    - keyword.operator.==
- source: mergeToolDeleteIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: allKeys
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: keysToCheck
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: key
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: newValueResult
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: key
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '!='
  scopes:
    - keyword.operator.!=
- source: mergeToolDeleteIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: allKeys
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: oldValueAfterDeletingKeys
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: removeAttrs
  scopes:
    - entity.name.function.method
- source: oldValue
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: keysToDelete
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: accumulator
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: keyGettingMerged
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: innerOldValueExists
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - variable.language.special.property.hasAttr
    - entity.name.function.call.builtin
    - support.type.builtin.method.hasAttr
- source: keyGettingMerged
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: accumulator
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: innerOldValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: accumulator
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: innerNewValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: newValueResult
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: oldValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: innerOldValueExists
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: accumulator
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '${'
  scopesBegin:
    - meta.attribute-set
    - meta.statement.dynamic-attr
  scopes:
    - punctuation.section.embedded
- source: keyGettingMerged
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveMerge
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: oldValue
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: oldValue
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: newValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: innerNewValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: path
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: keyGettingMerged
  scopes:
    - entity.name.function.object.method
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement.dynamic-attr
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: oldValueAfterDeletingKeys
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: keysToCheck
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: path
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: intialValue
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: foldl'
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: accumulator
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: action
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: '#'
  scopesBegin:
    - meta.let.in.part1
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' then, somehow, get a list of these magic attrSets into a recursive evaluator (e.g. like recursiveMerge) that detects those magic attrSets and gives them the attrPath'
  scopesEnd:
    - comment.line
- source: mergeTools
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' mergeTools.override'
  scopesEnd:
    - comment.line
- source: override
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - meta.statement
  scopes:
    - punctuation.section.parentheses
- source: newValue
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: makeMergeToolResult
  scopes:
    - entity.name.function.call
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: valueExisted
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: prevValue
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' always give new value, (e.g. skip merge)'
  scopesEnd:
    - comment.line
- source: newValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' mergeTools.noChange'
  scopesEnd:
    - comment.line
- source: noChange
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: makeMergeToolResult
  scopes:
    - entity.name.function.call
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: valueExisted
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: prevValue
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' always give prevValue. This is used in if statements. Ex: (if system == "x86_64-linux" then 10 else mergeTools.noChange)'
  scopesEnd:
    - comment.line
- source: prevValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' mergeTools.softMerge'
  scopesEnd:
    - comment.line
- source: softMerge
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: newValue
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: makeMergeToolResult
  scopes:
    - entity.name.function.call
- source: accumulator
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: valueExisted
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: prevValue
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: valueExisted
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: prevValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: newValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this technically isn''t a mergeToolResult, its its own special value and needs special handling'
  scopesEnd:
    - comment.line
- source: delete
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: mergeToolDeleteIdentifier
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: mergeTools.appendToFront        # for list merging'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO: mergeTools.appendToBack         # for list merging'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO: mergeTools.splice start length  # for list merging (splice will handle removal and injection) have it support negative start'
  scopesEnd:
    - comment.line
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: next
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: action
  scopes:
    - entity.name.function.call
- source: accumulator
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: mergeTools
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: recursiveMerge
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: oldValue
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: accumulator
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: newValue
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: next
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: path
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - meta.list
    - punctuation.definition.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: intialValue
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Initial value of `accumulator`'
  scopesEnd:
    - comment.line
- source: actions
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' vix specifics'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' input names'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' system'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' targetType'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' targetName'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' targetId'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' config.projectName'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' config.supportedSystems'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' configVix.[...options]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' warehouses.default'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' warehouses.<name>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' configPackage.<name>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' configShell.homeConfig.[...options]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' configShell.[...options]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' env.<EnvVarName>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' outputShell.<name>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' outputPackage.<name>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' outputApp.<name>'
  scopesEnd:
    - comment.line
- source: superStructToFlake
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: superStruct
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: '#'
  scopesBegin:
    - meta.let.in.part1
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: this is an important value'
  scopesEnd:
    - comment.line
- source: trivialInput
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: system
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: none
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetType
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetName
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetId
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: warehouses
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: configPackage
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: configShell
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' default shell'
  scopesEnd:
    - comment.line
- source: outputShell
  scopesBegin:
    - meta.statement
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: default
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: organizedInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: '@'
  scopes:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: devShellInputs
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: (
  scopes:
    - punctuation.section.parentheses
- source: xome
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: makeHomeFor
  scopes:
    - entity.name.function.method
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: pure
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: envPassthrough
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: NIX_SSL_CERT_FILE
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: TERM
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: XOME_REAL_HOME
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: XOME_REAL_PATH
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' ^this is the default list. Could add HISTSIZE, EDITOR, etc without loosing much purity'
  scopesEnd:
    - comment.line
- source: home
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: home-manager
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lib
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: homeManagerConfiguration
  scopes:
    - entity.name.function.method
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: pkgs
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: organizedInputs
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: modules
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: home
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: username
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: default
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' it NEEDS to be "default", it cant actually be '
  scopesEnd:
    - comment.line
- source: home
  scopesBegin:
    - meta.statement
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: homeDirectory
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: /tmp/virtual_homes/xome_simple
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: stateVersion
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '25.11'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: packages
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' vital stuff'
  scopesEnd:
    - comment.line
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coreutils-full
  scopes:
    - variable.other.property.last
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' optional stuff'
  scopesEnd:
    - comment.line
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: gnugrep
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: findutils
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: wget
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: curl
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: locale
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: more
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ps
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: getopt
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ifconfig
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hostname
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ping
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hexdump
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: killall
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mount
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sysctl
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: top
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unixtools
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: umount
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: git
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: htop
  scopes:
    - variable.other.property.last
- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ripgrep
  scopes:
    - variable.other.property.last
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: programs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: home-manager
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.statement
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: zsh
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enableCompletion
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: autosuggestion
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: syntaxHighlighting
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellAliases
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ll
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: ls -la
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: history
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '100000'
  scopes:
    - constant.numeric.integer
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this is kinda like .zshrc'
  scopesEnd:
    - comment.line
- source: initContent
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: '#'
  scopesBegin:
    - source.shell
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' this enables some impure stuff like sudo, comment it out to get FULL purity'
  scopesEnd:
    - comment.line.number-sign.shell
- source: export
  scopesBegin:
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
  scopes:
    - storage.modifier.export.shell
- source: PATH
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: PATH
  scopes:
    - variable.other.normal.shell
- source: ':/usr/bin/'
  scopes:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - source.shell
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
    - string.quoted.double.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: starship
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enableZshIntegration
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: initalOutput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: superStruct
  scopes:
    - entity.name.function.call
- source: trivialInput
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: supportedSystems
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: initalOutput
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: supportedSystems
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: flake-utils
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lib
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allSystems
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: systemSpecificOutput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: flake-utils
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lib
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eachSystem
  scopes:
    - entity.name.function.method.call
- source: supportedSystems
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: system
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: systemSuperStruct
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: superStruct
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: system
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' output shell and output package names'
  scopesEnd:
    - comment.line
- source: outputShellNames
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: systemSuperStruct
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputShell
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputPackageNames
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: systemSuperStruct
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputPackage
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputAppNames
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: systemSuperStruct
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputApp
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellOutputTargets
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachName
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: targetType
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: shell
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetName
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetId
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'shell:'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputShells
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: packageOutputTargets
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: targetType
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: package
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetName
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetId
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'package:'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputPackageNames
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: appOutputTargets
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: targetType
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: app
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetName
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: targetId
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'app:'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachName
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputAppNames
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputTargets
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: shellOutputTargets
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: packageOutputTargets
  scopes:
    - variable.other.object
    - variable.parameter
- source: ++
  scopes:
    - keyword.operator.++
- source: appOutputTargets
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' we are going to build the input for those'
  scopesEnd:
    - comment.line
- source: outputValues
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachOutput
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: eachOutput
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: value
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - meta.statement
  scopes:
    - punctuation.section.parentheses
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: rawSuperStruct
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: superStruct
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachOutput
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: system
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: packageConfigs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' default values of configPackage are defined here'
  scopesEnd:
    - comment.line
- source: derivation
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: each
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: add warning on missing derivation'
  scopesEnd:
    - comment.line
- source: isEmpty
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '||'
  scopes:
    - keyword.operator.||
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrNames
  scopes:
    - entity.name.function.method
- source: eachPackageConfig
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '=='
  scopes:
    - keyword.operator.==
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isBuildInput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackageConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isNativeBuildInput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackageConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asNativeBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isPropagatedBuildInput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackageConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asPropagatedBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isDevShellInput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackageConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asDevShellInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: isAppInput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackageConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asAppInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrValues
  scopes:
    - entity.name.function.method
- source: rawSuperStruct
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: configPackage
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: buildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: configPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isEmpty
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isBuildInput
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packageConfigs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: propagatedBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: configPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isEmpty
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isPropagatedBuildInput
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packageConfigs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nativeBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: configPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isEmpty
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isNativeBuildInput
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packageConfigs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: devShellInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: configPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isEmpty
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isDevShellInput
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packageConfigs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: appInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: configPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '!'
  scopes:
    - keyword.operator.!
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isEmpty
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: configPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAppInput
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packageConfigs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: organizedInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: rawSuperStruct
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: buildInputs
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - meta.statement
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: buildInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: propagatedBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: propagatedBuildInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nativeBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: nativeBuildInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: devShellInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: devShellInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: appInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: derivation
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: appInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mkShellOrMkDerivationOutput
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: eachOutput
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetType
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: shell
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - meta.punctuation.section.condition
    - string.quoted.double
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: systemSuperStruct
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputShell
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachOutput
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetName
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: organizedInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: (
  scopes:
    - punctuation.section.parentheses
- source: systemSuperStruct
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputPackage
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachOutput
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetName
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: organizedInputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: mkShellOrMkDerivationOutput
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputTargets
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' this gets fed to the flake-utils.lib.eachSystem'
  scopesEnd:
    - comment.line
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: devShells
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - meta.statement
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetType
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: shell
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputValues
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: packages
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetType
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: package
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputValues
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: apps
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: targetType
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: app
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: outputValues
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: systemSpecificOutput
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: setup
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: nixpkgs
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: projectName
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: warehouses
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: localPackages
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: builtins
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: core
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: '{'
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: nixpkgs
  scopesBegin:
    - entity.other.attribute-name
- source: projectName
- source: warehouses
- source: localPackages
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: builtins
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: assert
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.operator.assert
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isString
  scopes:
    - variable.language.special.property.isString
    - entity.name.function.call.builtin
    - support.type.builtin.method.isString
- source: projectName
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.separator.assert
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: load
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: system
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: defaultWarehouse
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: nixpkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: legacyPackages
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: system
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unEvaledPackages
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: localPackages
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: warehouseToPkgs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: (
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: import
  scopes:
    - entity.name.function.method
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' import source'
  scopesEnd:
    - comment.line
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - entity.name.function.method
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: tarFileUrl
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: defaultWarehouse
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fetchTarball
  scopes:
    - variable.language.special.property.fetchTarball
    - entity.name.function.call.builtin
    - support.type.builtin.method.fetchTarball
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - entity.name.function.method
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: url
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tarFileUrl
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: sha256
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sha256
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: url
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tarFileUrl
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: add support for fetchFromGit, and other methods'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isString
  scopes:
    - entity.name.function.method
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: isUrl
  scopes:
    - entity.name.function.call
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: defaultWarehouse
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fetchTarball
  scopes:
    - variable.language.special.property.fetchTarball
    - entity.name.function.call.builtin
    - support.type.builtin.method.fetchTarball
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: url
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' assume nixpkgs hash'
  scopesEnd:
    - comment.line
- source: defaultWarehouse
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fetchTarball
  scopes:
    - variable.language.special.property.fetchTarball
    - entity.name.function.call.builtin
    - support.type.builtin.method.fetchTarball
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: url
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'https://github.com/NixOS/nixpkgs/archive/'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: .tar.gz
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hasAttr
  scopes:
    - entity.name.function.method
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: gitHubInfo
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: defaultWarehouse
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fetchFromGitHub
  scopes:
    - entity.name.function.method.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachWarehouse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: gitHubInfo
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' {'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     owner = eachWarehouse.owner;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     repo = eachWarehouse.repo;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     rev = eachWarehouse.rev;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     sha256 = eachWarehouse.sha256;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' }'
  scopesEnd:
    - comment.line
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: throw
  scopes:
    - variable.language.special.property.throw
    - entity.name.function.call.builtin
    - support.type.builtin.method.throw
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: >-
    unsupported warehouse. Needs a tarFileUrl, or gitHubInfo (owner, repo, rev,
    and a sha256)
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' config'
  scopesEnd:
    - comment.line
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: system
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: system
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' overlays = [ ];'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: //
  scopes:
    - keyword.operator.//
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachWarehouse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: probably use a set instead of a list'
  scopesEnd:
    - comment.line
- source: warehousesByName
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachWarehouse
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: name
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachWarehouse
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: value
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: warehouseToPkgs
  scopes:
    - entity.name.function.call
- source: eachWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: warehouses
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: default
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: defaultWarehouse
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: packagesForThisSystem
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: defaultOnlyIf
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: system
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: onlyIf
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: onlyIf
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: defaultOnlyIf
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: onlyIf
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit system
  scopesEnd:
    - meta.punctuation.section.bracket
- source: ';}'
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: unEvaledPackages
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: evalPackage
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: add limiter here to wrap/filter bins and ENV vars'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' maybe also add a shellHook to enable stuff like zsh plugins'
  scopesEnd:
    - comment.line
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isString
  scopes:
    - entity.name.function.method
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: from
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: warehouse
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: getAttr
  scopes:
    - entity.name.function.method
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: from
  scopes:
    - entity.name.function.method.call
- source: warehousesByName
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: (
  scopes:
    - punctuation.section.parentheses
- source: getDeep
  scopes:
    - entity.name.function.call
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: package
  scopes:
    - entity.name.function.method.call
- source: warehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - entity.name.function.method
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: from
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' TODO: probably have vix auto-hoist and give them misc names instead of allowing inline hooks'
  scopesEnd:
    - comment.line
- source: (
  scopes:
    - punctuation.section.parentheses
- source: getDeep
  scopes:
    - entity.name.function.call
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: package
  scopes:
    - entity.name.function.method.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: warehouseToPkgs
  scopes:
    - entity.name.function.call
- source: eachPackage
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: from
  scopes:
    - variable.other.property.last
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: throw
  scopes:
    - variable.language.special.property.throw
    - entity.name.function.call.builtin
    - support.type.builtin.method.throw
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: unsupported package. Needs a string or attrset
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: buildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: evalPackage
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' asBuildInput is kinda redundant, but it''s allowed for the edgecase of something that needs to be both a buildInput and a nativeBuildInput'
  scopesEnd:
    - comment.line
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: (
  scopes:
    - punctuation.section.parentheses
- source: '!'
  scopes:
    - keyword.operator.!
- source: (
  scopesBegin:
    - punctuation.section.parentheses
- source: (
  scopesEnd:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asNativeBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asPropagatedBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
- source: )
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: packagesForThisSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nativeBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: evalPackage
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asNativeBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packagesForThisSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: propagatedBuildInputs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: evalPackage
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: filter
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: each
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: each
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: asPropagatedBuildInput
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packagesForThisSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: packagesByName
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listToAttrs
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: (
  scopes:
    - punctuation.section.parentheses
- source: eachPackage
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: name
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: eachPackage
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: value
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: evalPackage
  scopes:
    - entity.name.function.call
- source: eachPackage
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: packagesForThisSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: warehousesByName
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: packageList
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: packagesForThisSystem
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pkgs
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: packagesByName
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: inherit
  scopesBegin:
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: buildInputs
  scopesBegin:
    - entity.other.attribute-name
- source: nativeBuildInputs
- source: propagatedBuildInputs
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: defaultWarehouse
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: defaultWarehouse
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: mkShells
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: vixBuilder
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: supportedSystems
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: homeManagerConfigFunc
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: system
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: vixBuilt
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: (
  scopes:
    - punctuation.section.parentheses
- source: vixBuilder
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: load
  scopes:
    - entity.name.function.method
- source: system
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: '{'
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: vixBuilt
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: pkgs
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: modules
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: home
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: username
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: default
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: homeDirectory
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: /tmp/vix_homes/
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: vixBuilder
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: projectName
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: stateVersion
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '25.11'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' vixBuilder.nixpkgs.rev;'
  scopesEnd:
    - comment.line
- source: programs
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: home-manager
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.statement
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: zsh
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: package
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: zsh
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enableCompletion
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: autosuggestion
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: syntaxHighlighting
  scopesBegin:
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellAliases
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: ll
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: ls -la
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: history
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: size
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '100000'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.numeric.integer
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' large history size'
  scopesEnd:
    - comment.line
- source: save
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '100000'
  scopes:
    - constant.numeric.integer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: share
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ignoreDups
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: extended
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: initContent
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: setopt
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: HIST_IGNORE_ALL_DUPS
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: HIST_REDUCE_BLANKS
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: HIST_VERIFY
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: SHARE_HISTORY
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: INC_APPEND_HISTORY
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: INTERACTIVE_COMMENTS
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: '#'
  scopesBegin:
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' Handy options'
  scopesEnd:
    - comment.line.number-sign.shell
- source: setopt
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: AUTO_CD
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: CORRECT
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: setopt
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: NO_BEEP
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: '#'
  scopesBegin:
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' Set LS_COLORS using dircolors'
  scopesEnd:
    - comment.line.number-sign.shell
- source: if
  scopes:
    - keyword.control.if.shell
- source: command
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: v
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: dircolors
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: '&'
  scopes:
    - punctuation.separator.statement.background.shell
- source: '>'
- source: /dev/null
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: then
  scopes:
    - keyword.control.then.shell
- source: eval
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $(
  scopesBegin:
    - meta.scope.subshell.shell
  scopes:
    - punctuation.definition.subshell.shell.single.shell
- source: dircolors
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: b
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - meta.statement.command.shell
    - string.unquoted.argument.shell
- source: )
  scopes:
    - punctuation.definition.subshell.shell.single.shell
  scopesEnd:
    - meta.scope.subshell.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: fi
  scopes:
    - keyword.control.fi.shell
- source: '#'
  scopesBegin:
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' Enable Powerlevel10k if selected'
  scopesEnd:
    - comment.line.number-sign.shell
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression.shell
  scopes:
    - punctuation.definition.logical-expression.shell
- source: ' -f '
  scopesEnd:
    - source.shell
    - meta.scope.logical-expression.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: zsh
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /share/zsh/site-functions/p10k.zsh
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: ']]'
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: '&&'
  scopes:
    - punctuation.separator.statement.and.shell
- source: source
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
  scopesEnd:
    - source.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: zsh
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /share/zsh/site-functions/p10k.zsh
  scopes:
    - source.shell
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: starship
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: enable
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enableZshIntegration
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: settings
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: add_newline
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'false'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.false
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' prompt_order = ['
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "username"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "hostname"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "directory"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "git_branch"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "git_status"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "cmd_duration"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "line_break"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "jobs"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     "character"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ];'
  scopesEnd:
    - comment.line
- source: character
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: success_symbol
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '[∫](bold green)'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: error_symbol
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '[✗](bold red)'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' vix is primairly for home-setup stuff'
  scopesEnd:
    - comment.line
- source: home
  scopesBegin:
    - meta.statement
    - meta.assignment-start
    - meta.attribute-key
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: packages
  scopes:
    - variable.other.constant.last
    - variable.other.property
    - variable.parameter
  scopesEnd:
    - meta.attribute-key
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: defaultWarehouse
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coreutils
  scopes:
    - variable.other.property.last
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ++
  scopes:
    - keyword.operator.++
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrValues
  scopes:
    - variable.language.special.property.attrValues
    - entity.name.function.call.builtin
    - support.type.builtin.method.attrValues
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.default
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ','
  scopes:
    - punctuation.separator.comma
- source: overrideShell
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: builtins
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: core
  scopes:
    - variable.other.object
    - variable.parameter
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: (
  scopes:
    - punctuation.section.parentheses
- source: mkSystemAttrList
  scopes:
    - entity.name.function.call
- source: supportedSystems
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: system
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: vixBuilt
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: vixBuilder
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: load
  scopes:
    - entity.name.function.method
- source: system
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: homeBaseConfig
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: homeManagerConfigFunc
  scopes:
    - entity.name.function.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: system
  scopesBegin:
    - entity.other.attribute-name
- source: vixBuilt
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' make sure lib ends up in pkgs (even though thats not great, I''d have to fork home-manager to fix it)'
  scopesEnd:
    - comment.line
- source: homeConfig
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: homeBaseConfig
  scopes:
    - variable.other.object
    - variable.parameter
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: pkgs
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '{'
  scopesBegin:
    - meta.statement
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: lib
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: lib
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: inherit
  scopesBegin:
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: vixBuilt
  scopes:
    - entity.name.namespace
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: defaultWarehouse
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: path
  scopesBegin:
    - entity.other.attribute-name
- source: config
- source: overlays
- source: stdenv
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: //
  scopes:
    - keyword.operator.//
- source: homeBaseConfig
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: home
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: home-manager
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lib
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: homeManagerConfiguration
  scopes:
    - entity.name.function.method
- source: homeConfig
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellPackageNameProbably
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: home
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: programs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: zsh
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - entity.name.function.method
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: zsh
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: home
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: programs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: bash
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enable
  scopes:
    - entity.name.function.method
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: bash
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - entity.name.function.method
- source: overrideShell
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: throw
  scopes:
    - variable.language.special.property.throw
    - entity.name.function.call.builtin
    - support.type.builtin.method.throw
- source: ''''''
  scopesBegin:
    - string.quoted.other
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: >-
    Sorry I don't support the shell you selected in home manager (I only support
    zsh and bash) However you can override this by giving vix an argument:
    overrideShell = system: [ "
- source: '''''$'
  scopes:
    - constant.character.escape
- source: '{yourShellExecutablePath}" "--no-globalrcs" ]; '
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellCommandList
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopes:
    - punctuation.section.parentheses
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: shellPackageNameProbably
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: zsh
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: home
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: zsh
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /bin/zsh
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: '--no-globalrcs'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: shellPackageNameProbably
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: bash
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: home
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: bash
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /bin/bash
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: '--noprofile'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.list
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - entity.name.function.method
- source: overrideShell
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: (
  scopes:
    - punctuation.section.parentheses
- source: overrideShell
  scopes:
    - entity.name.function.call
- source: system
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: throw
  scopes:
    - variable.language.special.property.throw
    - entity.name.function.call.builtin
    - support.type.builtin.method.throw
- source: ''''''
  scopesBegin:
    - string.quoted.other
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: >-
    Note: this should be unreachable, but as a fallback: Sorry I don't support
    the shell you selected in home manager (I only support zsh and bash at the
    moment). However you can override this by giving vix an argument:
    overrideShell = system: [ "
- source: '''''$'
  scopes:
    - constant.character.escape
- source: '{yourShellExecutablePath}" "--no-globalrcs" ]; '
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: shellCommandString
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: concatStringsSep
  scopes:
    - variable.language.special.property.concatStringsSep
    - entity.name.function.call.builtin
    - support.type.builtin.method.concatStringsSep
- source: '"'
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - string.quoted.double
    - punctuation.definition.string.double
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: map
  scopes:
    - entity.name.function.method
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: shellCommandList
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: homePath
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: home
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: home
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: homeDirectory
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: default
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: (
  scopesBegin:
    - meta.statement
  scopes:
    - punctuation.section.parentheses
- source: makeMkShell
  scopes:
    - entity.name.function.call
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: defaultWarehouse
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: stdenv
  scopes:
    - variable.other.property.last
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: vixBuilt
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: buildInputs
  scopesBegin:
    - entity.other.attribute-name
- source: nativeBuildInputs
- source: propagatedBuildInputs
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: ENV vars'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: PATH modifications/limiter'
  scopesEnd:
    - comment.line
- source: shellHook
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: export
  scopesBegin:
    - source.shell
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
  scopes:
    - storage.modifier.export.shell
- source: REAL_HOME
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: HOME
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.double.shell
- source: export
  scopes:
    - storage.modifier.export.shell
- source: HOME
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
  scopesEnd:
    - source.shell
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: homePath
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: mkdir
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: p
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: HOME
  scopes:
    - variable.other.normal.shell
- source: /.local/state/nix/profiles
  scopes:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: '#'
  scopesBegin:
    - comment.line.number-sign.shell
  scopes:
    - punctuation.definition.comment.shell
- source: ' note: the grep is to remove common startup noise'
  scopesEnd:
    - comment.line.number-sign.shell
- source: USER
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: default
  scopes:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.double.shell
- source: HOME
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
  scopesEnd:
    - source.shell
    - meta.expression.assignment.shell
    - meta.expression.assignment.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: homePath
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopesBegin:
    - punctuation.section.embedded
- source: '${'
  scopesEnd:
    - punctuation.section.embedded
- source: home
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: activationPackage
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: out
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /activate
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '2'
  scopesBegin:
    - meta.argument.shell
  scopes:
    - keyword.operator.redirect.stderr.shell
- source: '>'
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
- source: '&'
  scopes:
    - punctuation.separator.statement.background.shell
- source: '1'
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '| '
  scopesEnd:
    - source.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: vixBuilt
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: defaultWarehouse
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: gnugrep
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /bin/grep
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: v
  scopes:
    - constant.other.option.shell
- source: '-'
  scopes:
    - constant.other.option.dash.shell
- source: E
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: Starting
  scopesBegin:
    - string.unquoted.argument.shell
- source: Home
- source: Manager
- source: activation
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: 'warning:'
  scopesBegin:
    - string.unquoted.argument.shell
- source: unknown
- source: experimental
- source: feature
  scopesEnd:
    - string.unquoted.argument.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: repl-flake
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.single.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: checkFilesChanged
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: checkLinkTargets
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: writeBoundary
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: 'No'
  scopesBegin:
    - string.unquoted.argument.shell
- source: change
- source: so
- source: reusing
- source: latest
- source: profile
- source: generation
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: installPackages
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: 'warning:'
  scopesBegin:
    - string.unquoted.argument.shell
- source: unknown
- source: experimental
- source: feature
  scopesEnd:
    - string.unquoted.argument.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: repl-flake
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.single.shell
- source: '|'
- source: replacing
  scopesBegin:
    - string.unquoted.argument.shell
- source: old
  scopesEnd:
    - string.unquoted.argument.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: home-manager-path
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.single.shell
- source: '|'
- source: installing
  scopes:
    - string.unquoted.argument.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: home-manager-path
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.single.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: linkGeneration
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Cleaning
  scopesBegin:
    - string.unquoted.argument.shell
- source: up
- source: orphan
- source: links
- source: from
- source: .
- source: '*'
  scopes:
    - variable.language.special.wildcard.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Creating
  scopesBegin:
    - string.unquoted.argument.shell
- source: home
- source: file
- source: links
- source: in
- source: .
- source: '*'
  scopes:
    - variable.language.special.wildcard.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: onFilesChange
  scopesEnd:
    - string.unquoted.argument.shell
- source: '|'
- source: Activating
  scopesBegin:
    - string.unquoted.argument.shell
- source: setupLaunchAgents
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.argument.shell
    - string.quoted.double.shell
- source: env
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: i
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: VIX_ACTIVE=
  scopesBegin:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: '1'
  scopes:
    - constant.numeric.shell
    - constant.numeric.integer.shell
- source: PATH=
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: homePath
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '/bin:'
  scopes:
    - source.shell
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: homePath
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: /.nix-profile/bin
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: HOME=
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: homePath
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: USER
  scopesBegin:
    - source.shell
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: USER
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.double.shell
- source: SHELL
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
  scopesEnd:
    - source.shell
    - meta.expression.assignment.shell
    - meta.expression.assignment.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapeShellArg
  scopes:
    - entity.name.function.method.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: builtins
  scopes:
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: elemAt
  scopes:
    - entity.name.function.method
- source: shellCommandList
  scopes:
    - variable.other.object
    - variable.parameter
- source: '0'
  scopes:
    - constant.numeric.integer
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: TERM
  scopesBegin:
    - source.shell
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: TERM
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - source.shell
    - meta.expression.assignment.shell
    - string.quoted.double.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: shellCommandString
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: exit
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: $
  scopesBegin:
    - meta.argument.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.language.special.shell.shell
- source: '?'
  scopes:
    - variable.language.special.shell
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
    - meta.argument.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: )
  scopesBegin:
    - punctuation.section.parentheses
- source: )
  scopesEnd:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: _vix
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: vixBuilder
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' for introspection'
  scopesEnd:
    - comment.line
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: inherit
  scopesBegin:
    - meta.attribute-set
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: setup
  scopesBegin:
    - entity.other.attribute-name
- source: mkShells
- source: print
- source: mergeActions
- source: getDeepAttribute
- source: hasDeepAttribute
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
