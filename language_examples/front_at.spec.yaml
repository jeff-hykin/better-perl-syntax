- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: lib
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: inherit
  scopesBegin:
    - meta.let.in.part1
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: lib
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: genAttrs
  scopesBegin:
    - entity.other.attribute-name
- source: isString
- source: throwIfNot
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: showMaybeAttrPosPre
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: prefix
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: attrName
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: v
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: pos
  scopesBegin:
    - meta.let.in.part1
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: builtins
  scopes:
    - variable.other.object.access
    - variable.parameter
    - support.module
    - variable.language.special.builtins
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unsafeGetAttrPos
  scopes:
    - variable.language.special.property.unsafeGetAttrPos
    - entity.name.function.call.builtin
    - support.type.builtin.method.unsafeGetAttrPos
- source: attrName
  scopesBegin:
    - variable.other.object
    - variable.parameter
- source: v
  scopesEnd:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: pos
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '=='
  scopes:
    - keyword.operator.==
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - string.quoted.double
    - punctuation.definition.string.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: prefix
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopesBegin:
    - punctuation.section.embedded
- source: '${'
  scopesEnd:
    - punctuation.section.embedded
- source: pos
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: file
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ':'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: toString
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.toString
- source: pos
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ':'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: toString
  scopes:
    - entity.name.function.call
    - support.type.builtin.top-level
    - support.type.builtin.property.toString
- source: pos
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: column
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: showMaybePackagePosPre
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: prefix
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: pkg
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: pkg
  scopesBegin:
    - meta.punctuation.section.condition
  scopes:
    - variable.other.object
    - variable.parameter
- source: '?'
  scopes:
    - keyword.operator.?
- source: meta
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: position
  scopes:
    - variable.other.property.last
- source: '&&'
  scopes:
    - keyword.operator.&&
- source: isString
  scopes:
    - entity.name.function.call
- source: pkg
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: meta
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: position
  scopes:
    - variable.other.property.last
  scopesEnd:
    - meta.punctuation.section.condition
- source: then
  scopes:
    - keyword.control.then
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: prefix
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopesBegin:
    - punctuation.section.embedded
- source: '${'
  scopesEnd:
    - punctuation.section.embedded
- source: pkg
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: meta
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: position
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: '"'
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - string.quoted.double
    - punctuation.definition.string.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '    Restrict a derivation to a predictable set of attribute names, so'
- source: '    that the returned attrset is not strict in the actual derivation,'
- source: '    saving a lot of computation when the derivation is non-trivial.'
- source: '    This is useful in situations where a derivation might only be used for its'
- source: '    passthru attributes, improving evaluation performance.'
- source: '    The returned attribute set is lazy in `derivation`. Specifically, this'
- source: '    means that the derivation will not be evaluated in at least the'
- source: '    situations below.'
- source: '    For illustration and/or testing, we define derivation such that its'
- source: '    evaluation is very noticeable.'
- source: '        let derivation = throw "This won''t be evaluated.";'
- source: '    In the following expressions, `derivation` will _not_ be evaluated:'
- source: '        (lazyDerivation { inherit derivation; }).type'
- source: '        attrNames (lazyDerivation { inherit derivation; })'
- source: '        (lazyDerivation { inherit derivation; } // { foo = true; }).foo'
- source: '        (lazyDerivation { inherit derivation; meta.foo = true; }).meta'
- source: '    In these expressions, `derivation` _will_ be evaluated:'
- source: '        "${lazyDerivation { inherit derivation }}"'
- source: '        (lazyDerivation { inherit derivation }).outPath'
- source: '        (lazyDerivation { inherit derivation }).meta'
- source: '    And the following expressions are not valid, because the refer to'
- source: '    implementation details and/or attributes that may not be present on'
- source: '    some derivations:'
- source: '        (lazyDerivation { inherit derivation }).buildInputs'
- source: '        (lazyDerivation { inherit derivation }).passthru'
- source: '        (lazyDerivation { inherit derivation }).pythonPath'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: lazyDerivation
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: args
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.object
    - variable.parameter
- source: '@'
  scopes:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' The derivation to be wrapped.'
  scopesEnd:
    - comment.line
- source: derivation
  scopesBegin:
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Optional meta attribute.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' While this function is primarily about derivations, it can improve'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the `meta` package attribute, which is usually specified through'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `mkDerivation`.'
  scopesEnd:
    - comment.line
- source: meta
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: 'null'
  scopes:
    - constant.language.null
  scopesEnd:
    - meta.default
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Optional extra values to add to the returned attrset.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' This can be used for adding package attributes, such as `tests`.'
  scopesEnd:
    - comment.line
- source: passthru
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - meta.default
    - punctuation.definition.dict
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Optional list of assumed outputs. Default: ["out"]'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' This must match the set of outputs that the returned derivation has.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' You must use this when the derivation has multiple outputs.'
  scopesEnd:
    - comment.line
- source: outputs
  scopes:
    - variable.parameter.function
    - variable.other.object.parameter
- source: '?'
  scopesBegin:
    - meta.default
  scopes:
    - punctuation.separator.default
- source: '['
  scopesBegin:
    - meta.list
  scopes:
    - punctuation.definition.list
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: out
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.list
  scopesEnd:
    - meta.default
    - meta.list
- source: '}'
  scopes:
    - punctuation.section.bracket
- source: ':'
  scopes:
    - punctuation.definition.function.colon
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.punctuation.section.function
    - meta.punctuation.section.parameters
- source: let
  scopesBegin:
    - meta.punctuation.section.let
  scopes:
    - keyword.control.let
- source: '#'
  scopesBegin:
    - meta.let.in.part1
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' These checks are strict in `drv` and some `drv` attributes, but the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' attrset spine returned by lazyDerivation does not depend on it.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Instead, the individual derivation attributes do depend on it.'
  scopesEnd:
    - comment.line
- source: checked
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: throwIfNot
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.parentheses
- source: derivation
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: 'null'
  scopes:
    - constant.language.null
- source: '=='
  scopes:
    - keyword.operator.==
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: derivation
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parentheses
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'lazyDerivation: input must be a derivation.'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: throwIfNot
  scopes:
    - variable.other.object
    - variable.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: Technically we could require our outputs to be a subset of the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' actual ones, or even leave them unchecked and fail on a lazy basis.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' However, consider the case where an output is added in the underlying'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' derivation, such as dev. lazyDerivation would remove it and cause it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to fail as a buildInputs item, without any indication as to what'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' happened. Hence the more stringent condition. We could consider'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' adding a flag to control this behavior if there''s a valid case for it,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' but the documentation must have a note like this.'
  scopesEnd:
    - comment.line
- source: (
  scopes:
    - punctuation.section.parentheses
- source: derivation
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.other.property.last
- source: '=='
  scopes:
    - keyword.operator.==
- source: outputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parentheses
- source: ''''''
  scopesBegin:
    - string.quoted.other
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: '            lib.lazyDerivation: The derivation '
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: derivation
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: <unknown>
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ' has outputs that don''t match the assumed outputs.'
- source: '            Assumed outputs passed to lazyDerivation'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: showMaybeAttrPosPre
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: ','
- source: \n
- source: '    at '
- source: '"'
  scopesBegin:
    - punctuation.definition.string.double
- source: '"'
  scopesEnd:
    - punctuation.definition.string.double
- source: outputs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: args
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ':'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: generators
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toPretty
  scopes:
    - entity.name.function.method.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: multiline
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'false'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.false
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: outputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ;
- source: '            Actual outputs of the derivation'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: showMaybePackagePosPre
  scopes:
    - entity.name.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: ','
- source: \n
- source: '    defined at '
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: derivation
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: ':'
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: lib
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: generators
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toPretty
  scopes:
    - entity.name.function.method.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: multiline
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: 'false'
  scopesBegin:
    - meta.statement
  scopes:
    - constant.language.boolean.false
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: derivation
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.other.property.last
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: '            If the outputs are known ahead of evaluating the derivation,'
- source: '            then update the lazyDerivation call to match the actual outputs, in the same order.'
- source: '            If lazyDerivation is passed a literal value, just change it to the actual outputs.'
- source: '            As a result it will work as before / as intended.'
- source: '            Otherwise, when the outputs are dynamic and can''t be known ahead of time, it won''t'
- source: '            be possible to add laziness, but lib.lazyDerivation may still be useful for trimming'
- source: '            the attributes.'
- source: '            If you want to keep trimming the attributes, make sure that the package is in a'
- source: '            variable (don''t evaluate it twice!) and pass the variable and its outputs attribute'
- source: '            to lib.lazyDerivation. This largely defeats laziness, but keeps the trimming.'
- source: '            If none of the above works for you, replace the lib.lazyDerivation call by the'
- source: '            expression in the derivation argument.'
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other
- source: derivation
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: in
  scopes:
    - keyword.control.in
  scopesEnd:
    - meta.punctuation.section.let
    - meta.let.in.part1
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Hardcoded `type`'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' `lazyDerivation` requires its `derivation` argument to be a derivation,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' so if it is not, that is a programming error by the caller and not'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' something that `lazyDerivation` consumers should be able to correct'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for after the fact.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' So, to improve laziness, we assume correctness here and check it only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' when actual derivation values are accessed later.'
  scopesEnd:
    - comment.line
- source: type
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '"'
  scopesBegin:
    - meta.statement
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: derivation
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' A fixed set of derivation values, so that `lazyDerivation` can return'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' its attrset before evaluating `derivation`.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This must only list attributes that are available on _all_ derivations.'
  scopesEnd:
    - comment.line
- source: inherit
  scopesBegin:
    - meta.inherit
  scopes:
    - keyword.other.inherit
- source: (
  scopesBegin:
    - meta.source
  scopes:
    - punctuation.separator.source
- source: checked
  scopes:
    - entity.name.namespace
- source: )
  scopes:
    - punctuation.separator.source
  scopesEnd:
    - meta.source
- source: outPath
  scopesBegin:
    - entity.other.attribute-name
- source: outputName
- source: drvPath
- source: name
- source: system
  scopesEnd:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: inherit
  scopes:
    - keyword.other.inherit
- source: outputs
  scopes:
    - entity.other.attribute-name
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.inherit
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' The meta attribute can either be taken from the derivation, or if the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `lazyDerivation` caller knew a shortcut, be taken from there.'
  scopesEnd:
    - comment.line
- source: meta
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: args
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: meta
  scopes:
    - variable.other.property.last
- source: or
  scopes:
    - keyword.operator.or
- source: checked
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: meta
  scopes:
    - variable.other.property.last
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
  scopesEnd:
    - meta.punctuation.section.bracket
    - meta.attribute-set
- source: //
  scopes:
    - keyword.operator.//
- source: genAttrs
  scopes:
    - entity.name.function.call
- source: outputs
  scopes:
    - variable.other.object
    - variable.parameter
- source: (
  scopes:
    - punctuation.section.parentheses
- source: outputName
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: checked
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: outputName
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: )
  scopes:
    - punctuation.section.parentheses
- source: //
  scopes:
    - keyword.operator.//
- source: passthru
  scopes:
    - variable.other.object
    - variable.parameter
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Conditionally set a derivation attribute.'
- source: '     Because `mkDerivation` sets `__ignoreNulls = true`, a derivation'
- source: '     attribute set to `null` will not impact the derivation output hash.'
- source: '     Thus, this function passes through its `value` argument if the `cond`'
- source: '     is `true`, but returns `null` if not.'
- source: '     Type: optionalDrvAttr :: Bool -> a -> a | Null'
- source: '     Example:'
- source: '       (stdenv.mkDerivation {'
- source: '         name = "foo";'
- source: '         x = optionalDrvAttr true 1;'
- source: '         y = optionalDrvAttr false 1;'
- source: '       }).drvPath == (stdenv.mkDerivation {'
- source: '         name = "foo";'
- source: '         x = 1;'
- source: '       }).drvPath'
- source: '       => true'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: optionalDrvAttr
  scopesBegin:
    - meta.statement
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Condition'
  scopesEnd:
    - comment.line
- source: cond
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: '#'
  scopesBegin:
    - comment.line
  scopes:
    - punctuation.definition.comment
- source: ' Attribute value'
  scopesEnd:
    - comment.line
- source: value
  scopes:
    - variable.parameter.function.standalone
    - variable.other.object.parameter
- source: ':'
  scopes:
    - punctuation.definition.function.colon
    - variable.other.object.parameter
- source: if
  scopesBegin:
    - meta.punctuation.section.conditional
  scopes:
    - keyword.control.if
- source: cond
  scopes:
    - meta.punctuation.section.condition
    - variable.other.object
    - variable.parameter
- source: then
  scopes:
    - keyword.control.then
- source: value
  scopes:
    - variable.other.object
    - variable.parameter
- source: else
  scopes:
    - keyword.control.else
  scopesEnd:
    - meta.punctuation.section.conditional
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
