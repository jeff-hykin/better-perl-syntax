- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: '!/usr/bin/perl'
  scopesEnd:
    - comment.line.number-sign
- source: use
  scopesBegin:
    - meta.import
  scopes:
    - keyword.other.use
- source: strict
  scopes:
    - entity.name.package
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: use
  scopes:
    - keyword.other.use
- source: warnings
  scopes:
    - entity.name.package
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.import
- source: sub
  scopes:
    - storage.type.sub
- source: readFileAsString
  scopes:
    - entity.name.function.definition
- source: '{'
  scopes:
    - punctuation.section.block.function
- source: use
  scopesBegin:
    - meta.import
  scopes:
    - keyword.other.use
- source: FindBin
  scopes:
    - entity.name.package
- source: qw
  scopes:
    - entity.name.function.special
- source: (
  scopes:
    - punctuation.section.block.function.special
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: RealBin
  scopesEnd:
    - variable.other.readwrite.global
- source: )
  scopes:
    - punctuation.section.block.function.special
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.import
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get arugments'
  scopesEnd:
    - comment.line.number-sign
- source: my
  scopes:
    - storage.modifier.my
- source: (
  scopes:
    - punctuation.section.parens
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: file_relative_path
  scopesEnd:
    - variable.other.readwrite.global
- source: )
  scopes:
    - punctuation.section.parens
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '@'
  scopesBegin:
    - variable.other.readwrite.global.special
  scopes:
    - punctuation.definition.variable
- source: _
  scopesEnd:
    - variable.other.readwrite.global.special
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: open
  scopes:
    - support.function
- source: (
  scopes:
    - punctuation.section.parens
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: fh
  scopesEnd:
    - variable.other.readwrite.global
- source: ','
  scopes:
    - punctuation.separator.comma
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '<:encoding(UTF-8)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: RealBin
  scopesEnd:
    - variable.other.readwrite.global
- source: /
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: file_relative_path
  scopesEnd:
    - variable.other.readwrite.global
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens
- source: or
  scopes:
    - keyword.operator.alias.or
- source: die
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Could not open file '
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: file_relative_path
  scopesEnd:
    - variable.other.readwrite.global
- source: ''' '
- source: $
  scopesBegin:
    - variable.other.predefined
  scopes:
    - punctuation.definition.variable
- source: '!'
  scopesEnd:
    - variable.other.predefined
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: text
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopes:
    - punctuation.section.parens.control
- source: my
  scopesBegin:
    - meta.control.evaluation
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: row
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: <
  scopes:
    - punctuation.separator.readline
- source: $
  scopesBegin:
    - meta.readline
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: fh
  scopesEnd:
    - meta.readline
    - variable.other.readwrite.global
- source: '>'
  scopes:
    - punctuation.separator.readline
  scopesEnd:
    - meta.control.evaluation
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: $
  scopesBegin:
    - meta.control.body
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: text
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: text$row
  scopesEnd:
    - variable.other.readwrite.global
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: return
  scopes:
    - keyword.control
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: text
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.function
- source: sub
  scopes:
    - storage.type.sub
- source: is_a_command
  scopes:
    - entity.name.function.definition
- source: '{'
  scopes:
    - punctuation.section.block.function
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: command_name
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopesBegin:
    - variable.other.predefined
  scopes:
    - punctuation.definition.variable
- source: _
  scopesEnd:
    - variable.other.predefined
- source: '['
  scopes:
    - punctuation.section.square-brackets
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.section.square-brackets
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: output
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '`'
  scopesBegin:
    - string.interpolated
  scopes:
    - punctuation.definition.string.begin
- source: 'command -v '
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: command_name
  scopesEnd:
    - variable.other.readwrite.global
- source: '`'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.interpolated
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopes:
    - punctuation.section.parens.control
- source: $
  scopesBegin:
    - meta.control.evaluation
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: output
  scopesEnd:
    - variable.other.readwrite.global
- source: '=~'
  scopes:
    - keyword.operator.comparison
- source: /
  scopesBegin:
    - string.regexp.find
  scopes:
    - punctuation.definition.string
- source: .
  scopes:
    - constant.character.character-class.regexp
- source: +
  scopes:
    - keyword.operator.quantifier.regexp
- source: /
  scopes:
    - punctuation.definition.string
  scopesEnd:
    - meta.control.evaluation
    - string.regexp.find
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: return
  scopesBegin:
    - meta.control.body
  scopes:
    - keyword.control
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: output
  scopesEnd:
    - variable.other.readwrite.global
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: return
  scopesBegin:
    - meta.control.body
  scopes:
    - keyword.control
- source: undef
  scopes:
    - constant.language.undef
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: '}'
  scopes:
    - punctuation.section.block.function
- source: use
  scopesBegin:
    - meta.import
  scopes:
    - keyword.other.use
- source: LWP
  scopes:
    - entity.name.package
- source: '::'
  scopes:
    - punctuation.separator.resolution
- source: Simple
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: use
  scopes:
    - keyword.other.use
- source: LWP
  scopes:
    - entity.name.package
- source: '::'
  scopes:
    - punctuation.separator.resolution
- source: 'UserAgent '
- source: qw
  scopes:
    - entity.name.function.special
- source: (
  scopesBegin:
    - punctuation.section.block.function.special
- source: )
  scopesEnd:
    - punctuation.section.block.function.special
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.import
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: ua
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' LWP::UserAgent'
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: new
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: my
  scopes:
    - storage.modifier.my
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: res
  scopesEnd:
    - variable.other.readwrite.global
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: ua
  scopesEnd:
    - variable.other.readwrite.global
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: mirror
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://www.google.com'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /Users/jeffhykin/setup.pl
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: )
  scopes:
    - punctuation.section.arguments
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopes:
    - punctuation.section.parens.control
- source: $
  scopesBegin:
    - meta.control.evaluation
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: res
  scopesEnd:
    - variable.other.readwrite.global
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: is_error
  scopesEnd:
    - meta.control.evaluation
- source: )
  scopes:
    - punctuation.section.parens.control
- source: '{'
  scopes:
    - punctuation.section.block.control
- source: printf
  scopesBegin:
    - meta.control.body
  scopes:
    - support.function
- source: (
  scopes:
    - punctuation.section.parens
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: mirror failed.
- source: \n
  scopes:
    - constant.character.escape
- source: 'Status: '
- source: '%'
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: s
  scopesEnd:
    - variable.other.readwrite.global
- source: \n
  scopes:
    - constant.character.escape
- source: 'Content:'
- source: \n
  scopes:
    - constant.character.escape
- source: '%'
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: s
  scopesEnd:
    - variable.other.readwrite.global
- source: \n
  scopesBegin:
    - constant.character.escape
- source: \n
  scopesEnd:
    - constant.character.escape
- source: 'Full response:'
- source: \n
  scopes:
    - constant.character.escape
- source: '%'
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: s
  scopesEnd:
    - variable.other.readwrite.global
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: res
  scopesEnd:
    - variable.other.readwrite.global
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: status_line
- source: ','
  scopes:
    - punctuation.separator.comma
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: res
  scopesEnd:
    - variable.other.readwrite.global
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: content
- source: ','
  scopes:
    - punctuation.separator.comma
- source: $
  scopesBegin:
    - variable.other.readwrite.global
  scopes:
    - punctuation.definition.variable
- source: res
  scopesEnd:
    - variable.other.readwrite.global
- source: '->'
  scopes:
    - keyword.operator.comparison
- source: as_string
- source: )
  scopes:
    - punctuation.section.parens
  scopesEnd:
    - meta.control.body
- source: '}'
  scopes:
    - punctuation.section.block.control
- source: print
  scopes:
    - support.function
- source: getstore
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://www.google.com'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /Users/jeffhykin/setup.pl
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments
- source: ;
  scopes:
    - punctuation.terminator.statement
